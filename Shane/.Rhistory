source('D:/OneDrive - UW/School/Sophomore/INFO 201/a5-api-report-stm7631/process_data.R')
source('D:/OneDrive - UW/School/Sophomore/INFO 201/a5-api-report-stm7631/process_data.R')
source('D:/OneDrive - UW/School/Sophomore/INFO 201/a5-api-report-stm7631/process_data.R')
source('D:/OneDrive - UW/School/Sophomore/INFO 201/a5-api-report-stm7631/process_data.R')
member <- members[1,]
member <- propublica_initialize(state_initials)[1,
]
source("keys.R")
member <- propublica_initialize(state_initials)[1,
]
View(member)
source('D:/OneDrive - UW/School/Sophomore/INFO 201/a5-api-report-stm7631/process_data.R')
member <- propublica_initialize(state_initials)[1,] %>%
replace(.=="D", "Democrat") %>%
replace(.=="R", "Republican")
today <- as.Date(Sys.Date())
birthday <- as.Date(member$date_of_birth)
age <- floor((today - birthday) / 365)
source('D:/OneDrive - UW/School/Sophomore/INFO 201/a5-api-report-stm7631/process_data.R')
source('D:/OneDrive - UW/School/Sophomore/INFO 201/a5-api-report-stm7631/process_data.R')
source('D:/OneDrive - UW/School/Sophomore/INFO 201/a5-api-report-stm7631/process_data.R')
source('D:/OneDrive - UW/School/Sophomore/INFO 201/a5-api-report-stm7631/process_data.R')
View(member)
source('D:/OneDrive - UW/School/Sophomore/INFO 201/a5-api-report-stm7631/process_data.R')
source('D:/OneDrive - UW/School/Sophomore/INFO 201/a5-api-report-stm7631/process_data.R')
source('D:/OneDrive - UW/School/Sophomore/INFO 201/a5-api-report-stm7631/process_data.R')
source('D:/OneDrive - UW/School/Sophomore/INFO 201/a5-api-report-stm7631/process_data.R')
View(member)
source('D:/OneDrive - UW/School/Sophomore/INFO 201/a5-api-report-stm7631/process_data.R')
setwd("D://OneDrive - UW//School//Sophomore//INFO 201//a5-api-report-stm7631")
setwd("D://OneDrive - UW//School//Sophomore//INFO 201//a5-api-report-stm7631")
source("keys.R")
## read the data
##
## hint1: figure out the correct format and use the correct function.
##
## hint2: read.table and friends are slow (about 6 min to read data).
## You may use data.table::fread instead (a few seconds)
library(R.utils)
data <- data.table::fread("temp_prec_tiny.csv.bz2")
setwd(D:\OneDrive - UW\School\Sophomore\INFO 201\a6-server-stm7631)
setwd(D:\\"OneDrive - UW"\\School\\Sophomore\\"INFO 201"\\a6-server-stm7631)
setwd(D://"OneDrive - UW"//School//Sophomore//"INFO 201"//a6-server-stm7631)
setwd(~\\"OneDrive - UW"\\School\\Sophomore\\"INFO 201"\\a6-server-stm7631)
setwd(~)
data <- data.table::fread("temp_prec_tiny.csv.bz2")
library(microbenchmark)
library(dplyr)
if (Sys.info()["user"] == "shane") {
PROJECTDIR <- file.path("C:", "Users", "shane", "OneDrive - UW", "School", "Sophomore", "INFO 201", "a7-collaboration-af-team-beasts", "data")
fileName <- "UFOCoords.csv"
}
path <- paste0(PROJECTDIR, "/", fileName)
data <- read.csv(path)
if (Sys.info()["user"] == "shane") {
PROJECTDIR <- file.path("C:", "Users", "shane", "OneDrive - UW", "School", "Sophomore", "INFO 201", "a7-collaboration-af-team-beasts", "data")
fileName <- "UFOCoords.csv"
}
path <- paste0(PROJECTDIR, "/", fileName)
if (Sys.info()["user"] == "shane") {
PROJECTDIR <- file.path("D:", "OneDrive - UW", "School", "Sophomore", "INFO 201", "a7-collaboration-af-team-beasts", "data")
fileName <- "UFOCoords.csv"
}
path <- paste0(PROJECTDIR, "/", fileName)
data <- read.csv(path)
benchmark <- microbenchmark(updateDataPiped,
updateData,
times=1000L)
updateDataPiped <- function() {
filteredData <- data %>%
select(Date, Time, AM.PM, City, State) %>%
filter(AM.PM == "AM") %>%
filter(State == "WA")
}
updateData <- function() {
filteredData <- select(data, Date, Time, AM.PM, City, State)
filteredData <- filter(data, AM.PM == "AM")
filteredData <- filter(data, State == "WA")
}
benchmark <- microbenchmark(updateDataPiped,
updateData,
times=1000L)
print(benchmark)
benchmark <- microbenchmark(updateDataPiped,
updateData,
times=1000L)
print(benchmark)
benchmark <- microbenchmark(updateDataPiped,
updateData,
times=1000L)
print(benchmark)
updateData <- function() {
filteredData <- data %>%
select(Date, Time, AM.PM, City, State) %>%
filter(AM.PM == "AM") %>%
filter(State == "WA")
}
updateDataStock <- function() {
filteredData <- select(data, Date, Time, AM.PM, City, State)
filteredData <- filter(data, AM.PM == "AM")
filteredData <- filter(data, State == "WA")
}
filteredData2 <- subset(data, select =c("Date", "Time", "AM.PM", "City", "State")
filteredData2 <- subset(data, select =c("Date", "Time", "AM.PM", "City", "State"))
filteredData2 <- subset(data, select =c("Date", "Time", "AM.PM", "City", "State"))
View(filteredData2)
benchmark <- microbenchmark(updateDataStock,
updateData,
times=1000L)
print(benchmark)
print(benchmark)
benchmark <- microbenchmark(updateDataStock,
updateData,
times=1000L)
print(benchmark)
benchmark <- microbenchmark(updateDataStock, updateData)
print(benchmark)
benchmark <- microbenchmark(updateDataStock, updateData)
print(benchmark)
benchmark <- microbenchmark(updateDataStock, updateData)
print(benchmark)
benchmark <- microbenchmark(updateDataStock, updateData)
print(benchmark)
benchmark <- microbenchmark(updateDataStock, updateData)
print(benchmark)
benchmark <- microbenchmark(updateDataStock, updateData)
print(benchmark)
benchmark <- microbenchmark(updateDataStock, updateData)
print(benchmark)
microbenchmark(updateDataStock, updateData)
microbenchmark(updateDataStock, updateData)
microbenchmark(updateDataStock, updateData)
microbenchmark(updateDataStock, updateData)
microbenchmark(updateDataStock, updateData)
microbenchmark(updateDataStock, updateData)
updateDataStock <- function() {
filteredData <- subset(data, select =c("Date", "Time", "AM.PM", "City", "State"))
filteredData <- filteredData[filteredData$AM.PM == "AM"]
filteredData <- filteredData[filteredData$State == "WA"]
plot(filteredData)
}
updateDataStock
filteredData <- subset(data, select =c("Date", "Time", "AM.PM", "City", "State"))
filteredData <- filteredData[filteredData$AM.PM == "AM"]
filteredData <- filteredData[filteredData$State == "WA"]
filteredData <- subset(data, select =c("Date", "Time", "AM.PM", "City", "State"))
filteredData <- filteredData[filteredData$AM.PM == "AM"]
filteredData <- filteredData[filteredData$"AM.PM" == "AM"]
View(filteredData)
filteredData <- filteredData[filteredData$AM.PM == "AM", ]
filteredData <- filteredData[filteredData$State == "WA", ]
View(filteredData)
plot(filteredData)
View(filteredData)
updateDataStock <- function() {
filteredData <- subset(data, select =c("Date", "Time", "AM.PM", "City", "State"))
filteredData <- filteredData[filteredData$AM.PM == "AM", ]
filteredData <- filteredData[filteredData$State == "WA", ]
plot(filteredData)
}
if (Sys.info()["user"] == "shane") {
PROJECTDIR <- file.path("D:", "OneDrive - UW", "School", "Sophomore", "INFO 201", "a7-collaboration-af-team-beasts", "data")
fileName <- "UFOCoords.csv"
}
path <- paste0(PROJECTDIR, "/", fileName)
data <- read.csv(path)
updateData <- function() {
filteredData <- data %>%
select(Date, Time, AM.PM, City, State) %>%
filter(AM.PM == "AM") %>%
filter(State == "WA")
}
updateDataStock <- function() {
filteredData <- subset(data, select =c("Date", "Time", "AM.PM", "City", "State"))
filteredData <- filteredData[filteredData$AM.PM == "AM", ]
filteredData <- filteredData[filteredData$State == "WA", ]
plot(filteredData)
}
updateData()
updateData
updateData <- function(data) {
filteredData <- data %>%
select(Date, Time, AM.PM, City, State) %>%
filter(AM.PM == "AM") %>%
filter(State == "WA")
}
updateDataStock <- function(data) {
filteredData <- subset(data, select =c("Date", "Time", "AM.PM", "City", "State"))
filteredData <- filteredData[filteredData$AM.PM == "AM", ]
filteredData <- filteredData[filteredData$State == "WA", ]
plot(filteredData)
}
updateData(data)
microbenchmark(updateDataStock, updateData)
microbenchmark(updateDataStock, updateData)
updateDataStock <- function(data) {
filteredData <- subset(data, select =c("Date", "Time", "AM.PM", "City", "State"))
filteredData <- filteredData[filteredData$AM.PM == "AM", ]
filteredData <- filteredData[filteredData$State == "WA", ]
plot(filteredData)
}
updateData <- function() {
filteredData <- data %>%
select(Date, Time, AM.PM, City, State) %>%
filter(AM.PM == "AM") %>%
filter(State == "WA")
}
updateDataStock <- function() {
filteredData <- subset(data, select =c("Date", "Time", "AM.PM", "City", "State"))
filteredData <- filteredData[filteredData$AM.PM == "AM", ]
filteredData <- filteredData[filteredData$State == "WA", ]
plot(filteredData)
}
View(updateData)
View(updateDataStock)
updateData <- function() {
filteredData <- data %>%
select(Date, Time, AM.PM, City, State) %>%
filter(AM.PM == "AM") %>%
filter(State == "WA")
return(filteredData)
}
updateDataStock <- function() {
filteredData <- subset(data, select =c("Date", "Time", "AM.PM", "City", "State"))
filteredData <- filteredData[filteredData$AM.PM == "AM", ]
filteredData <- filteredData[filteredData$State == "WA", ]
return(filteredData)
}
updateData
updateData()
microbenchmark(updateDataStock, updateData)
microbenchmark(updateDataStock, updateData)
microbenchmark(updateDataStock, updateData)
microbenchmark(updateDataStock, updateData)
filteredData <- data %>%
select(Date, Time, AM.PM, City, State) %>%
filter(AM.PM == "AM") %>%
filter(State == "WA")
View(filteredData)
counts <- table(mtcars$gear)
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
View(filteredData)
counts <- table(filteredData$City)
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
jpeg('stockPlot.jpg')
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
dev.off()
counts <- table(filteredData$City)
jpeg("stockPlot.jpg")
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
dev.off()
plot(counts, main="Car Distribution",
xlab="Number of Gears")
plot(counts, main="Car Distribution",
xlab="Number of Gears")
bar
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
plot(counts, main="Car Distribution",
xlab="Number of Gears")
jpeg("stockPlot.jpg")
plot(counts, main="Car Distribution",
xlab="Number of Gears")
dev.off()
jpeg(filename = "stockPlot.jpg")
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
dev.off()
barplot(counts, main="City Distribution",
xlab="City")
dev.off()
jpeg(filename = "stockPlot.jpg")
barplot(counts, main="City Distribution",
xlab="City")
dev.off()
barplot(counts, main="City Distribution",
xlab="City")
dev.off()
jpeg(filename = "stockPlot.jpg")
barplot(counts, main="City Distribution",
xlab="City")
dev.off()
install.packages("shiny")
library(shiny)
library(ggplot2)
shinyApp(ui = ui, server = server)
ui <- fluidPage {
}
server <- function(input, output) {
}
shinyServer(server)
ui <- fluidPage (
)
shinyUI(ui)
library(shiny)
library(ggplot2)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- fluidPage (
titlePanel("Sangay gay."),
)
ui <- fluidPage (
titlePanel("Sangay gay.")
)
shinyUI(ui)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
fluidPage
ui <- fluidPage (
titlePanel("Sangay gay."),
sliderInput("n", "give a number", 1, 100 ,50)
)
shinyUI(ui)
server <- function(input, output) {
output$distPlot <- renderPlot({
n <- input$n
plot(rnorm(n))
})
}
shinyServer(server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- fluidPage (
titlePanel("Sangay gay."),
sliderInput("n", "How gay is Sanjay?", 1, 100 ,50)
)
shinyUI(ui)
server <- function(input, output) {
output$distPlot <- renderPlot({
n <- input$n
plot(rnorm(n))
})
}
shinyServer(server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- fluidPage (
titlePanel("Sangay gay."),
sliderInput("n", "How gay is Sanjay?", 1, 100 ,50),
mainPanel(
plotOutput("distPlot")
)
)
shinyUI(ui)
shinyApp(ui = ui, server = server)
data <- read.csv("data/UFOCoords.csv.bz2")
shiny::runApp('D:/OneDrive - UW/School/Sophomore/INFO 201/a8-app-stm7631')
shiny::runApp('D:/OneDrive - UW/School/Sophomore/INFO 201/a8-app-stm7631')
runApp('D:/OneDrive - UW/School/Sophomore/INFO 201/a8-app-stm7631')
runApp('D:/OneDrive - UW/School/Sophomore/INFO 201/a8-app-stm7631')
shiny::runApp('C:/Users/shane/OneDrive - UW/School/Sophomore/INFO 201/Info-201-Group-Project/Shane')
runApp('C:/Users/shane/OneDrive - UW/School/Sophomore/INFO 201/Info-201-Group-Project/Shane')
runApp('C:/Users/shane/OneDrive - UW/School/Sophomore/INFO 201/Info-201-Group-Project/Shane')
runApp('C:/Users/shane/OneDrive - UW/School/Sophomore/INFO 201/Info-201-Group-Project/Shane')
runApp('C:/Users/shane/OneDrive - UW/School/Sophomore/INFO 201/Info-201-Group-Project/Shane')
runApp('C:/Users/shane/OneDrive - UW/School/Sophomore/INFO 201/Info-201-Group-Project/Shane')
# Only use necessary data to improve efficiency.
selectedData <- reactive({
data <- fread("../Data/WH16.csv") %>%
mutate(Country = if_else(Country == "United States", 'USA',
if_else(Country == "United Kingdom", 'UK', Country)))
data <- subset(data)
})
selectedData()
runApp('C:/Users/shane/OneDrive - UW/School/Sophomore/INFO 201/Info-201-Group-Project/Shane')
runApp('C:/Users/shane/OneDrive - UW/School/Sophomore/INFO 201/Info-201-Group-Project/Shane')
runApp('C:/Users/shane/OneDrive - UW/School/Sophomore/INFO 201/Info-201-Group-Project/Shane')
runApp('C:/Users/shane/OneDrive - UW/School/Sophomore/INFO 201/Info-201-Group-Project/Shane')
runApp('C:/Users/shane/OneDrive - UW/School/Sophomore/INFO 201/Info-201-Group-Project/Shane')
runApp('C:/Users/shane/OneDrive - UW/School/Sophomore/INFO 201/Info-201-Group-Project/Shane')
View("../Data/WH15")
View(../Data/WH15)
View(fread("../Data/WH15"))
setwd("C:/Users/shane/OneDrive - UW/School/Sophomore/INFO 201/Info-201-Group-Project")
View(fread("../Data/WH15"))
View(fread(../Data/WH15))
View(fread("../Data/WH15.csv"))
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
View(data)
library(shiny)
library(dplyr)
library(ggplot2)
library(data.table)
server <- function(input, output) {
# Only use necessary data to improve efficiency.
selectedData <- reactive({
dataPath <- paste0("../Data/WH", input$radio, ".csv")
data <- fread(dataPath) %>%
mutate(Country = if_else(Country == "United States", 'USA',
if_else(Country == "United Kingdom", 'UK', Country))) %>%
subset()
})
#
## Given chosen state, display how many different reports there have been.
# output$selected <- renderText({
#   paste0("There have been ", nrow(filteredData()), " UFO spottings in ", input$state, ".")
# })
## Given user selected button, either output a plot of city data or shape data.
## Both graphs are ordered by frequency, and are bar charts.
output$value <- renderPrint({ input$radio })
output$plot <- renderPlot({
map.world <- map_data('world')
mapped <- left_join(map.world, selectedData(), by = c('region' = 'Country'))
# column_name = "Happiness.Score"
# if (input$radio == "17") {
#   column_name = "Happiness Score"
# }
ggplot(data = mapped, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = `Happiness Score`))
labs(title = "Global Happiness by Nation", caption = "Source: World Happiness Report")
})
}
shinyServer(server)
ui <- fluidPage(
#theme = "shiny.css",
titlePanel("World Happiness Report"),
sidebarLayout(
## Sidebar contains two widgets: a dropdown menu with all states/territories,
## and radio buttons changing between displaying city and shape data.
sidebarPanel(
radioButtons("radio", label = h3("Radio buttons"),
choices = list("2015" = 15, "2016" = 16, "2017" = 17))
#selectInput("state", "State or Province:", choices = sort(unique(data[["State"]]))),
#radioButtons("sort", "Sort by:", choices = c("City", "Shape"))
),
## Main panel contains summary text and main bar chart of city or shape.
mainPanel(
#textOutput("selected"),
plotOutput("plot", width = "750px", height = "400px")
)
)
)
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
runApp('Shane')
data <- fread("../Data/WH15.csv") %>%
mutate(Country = if_else(Country == "United States", 'USA',
if_else(Country == "United Kingdom", 'UK', Country)))
setwd("C:/Users/shane/OneDrive - UW/School/Sophomore/INFO 201/Info-201-Group-Project/Shane")
runApp()
data <- fread("../Data/WH15.csv") %>%
mutate(Country = if_else(Country == "United States", 'USA',
if_else(Country == "United Kingdom", 'UK', Country)))
View(data)
data <- fread("../Data/WH16.csv") %>%
mutate(Country = if_else(Country == "United States", 'USA',
if_else(Country == "United Kingdom", 'UK', Country)))
mapped <- left_join(map.world, data, by = c('region' = 'Country'))
map.world <- map_data('world')
mapped <- left_join(map.world, data, by = c('region' = 'Country'))
View(mapped)
ggplot(data = mapped, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = `Health (Life Expectancy)`))
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
View(data)
runApp()
runApp()
runApp()
data <- fread("../Data/WH17.csv") %>%
mutate(Country = if_else(Country == "United States", 'USA',
if_else(Country == "United Kingdom", 'UK', Country)))
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
